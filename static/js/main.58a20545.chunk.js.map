{"version":3,"sources":["utils/linestringToLatLng.js","components/GeoMap.js","data/api.js","data/const.js","components/GeoMapContainer.js","App.js","serviceWorker.js","index.js"],"names":["linestringToLatLng","linestring","result","numbers","match","lat","i","forEach","number","parseFloat","push","GeoMap","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","lng","zoom","state","linestrings","newProps","setState","antPaths","departureLanes","positions","react_default","a","createElement","react_leaflet_ant_path_default","options","color","reverse","key","arrivalLanes","position","getAntPaths","Map","style","width","height","center","TileLayer","attribution","url","React","Component","namedNode","n3","DataFactory","download","_uri","Promise","resolve","reject","axios","get","then","response","data","catch","error","parseAndStoreQuads","_doc","parser","Parser","store","Store","parse","quad","prefixes","addQuad","_callee","_store","signalgroups","regenerator_default","wrap","_context","prev","next","getQuads","subject","value","abrupt","stop","getLaneDefs","_x2","_getLaneDefs","apply","arguments","_callee2","lanes","_context2","object","getStateDefs","_x3","_getStateDefs","_callee3","greenStates","_context3","getGreenStates","_x4","_getGreenStates","_callee4","_context4","DATASET_URL","GeoMapContainer","doc","laneDefs","stateDefs","lanesForSignalgroups","greenLightLineStrings","init","_this2","_x","_getSignalGroups","getSignalGroups","sg","departurelanes","processedDepartureLanes","includes","connectie","signalgroup","arrivalLane","descr","@id","http://purl.org/dc/terms/description","https://w3id.org/opentrafficlights#signalGroup","getDepartureLanes","all","signalGroups","signalGroup","connection","lanesForGroups","defs","states","getGreenLightLineStrings","_this3","timer","setInterval","tick","clearInterval","_this4","_this5","greenDepartureLanes","greenArrivalLanes","lane","GeoMap_GeoMap","App","GeoMapContainer_GeoMapContainer","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.58a20545.chunk.js","sourcesContent":["/*\r\nhelper function to get [[lat,long],[lat,long],[lat,long]] from \"LINESTRING ( lat long, lat long, lat long )\"\r\n */\r\n\r\nexport default function (linestring) {\r\n    let result = [];\r\n    let regex = /\\d*\\.\\d*/g;\r\n    let numbers = linestring.match(regex);\r\n\r\n    let lat = 0;\r\n    let i = 0;\r\n    numbers.forEach((number)=>{\r\n        if(i%2===0){\r\n            lat = parseFloat(number);\r\n        }\r\n        else {\r\n            result.push([lat,parseFloat(number)]);\r\n        }\r\n        i=(i+1)%2;\r\n    });\r\n\r\n    return result;\r\n}","import React from 'react';\r\nimport {Map, TileLayer} from 'react-leaflet';\r\nimport AntPath from 'react-leaflet-ant-path';\r\nimport linestringToLatLng from \"../utils/linestringToLatLng\";\r\n\r\n\r\nexport default class GeoMap extends React.Component {\r\n    constructor(props){\r\n        super();\r\n        this.lat = 51.21205;\r\n        this.lng = 4.39717;\r\n        this.zoom = 18;\r\n        this.state = {\r\n            linestrings: props.linestrings\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(newProps){\r\n        this.setState({linestrings: newProps.linestrings})\r\n    }\r\n\r\n    getAntPaths(){\r\n        let antPaths = [];\r\n        let {linestrings} = this.state;\r\n        if(linestrings){\r\n            let i=0;\r\n            linestrings.departureLanes.forEach(\r\n                (linestring)=>{\r\n                    let positions = linestringToLatLng(linestring);\r\n                    antPaths.push(<AntPath positions={positions} options={{color: \"green\", reverse: \"true\"}} key={linestring+i}/>);\r\n                    i++;\r\n                }\r\n            );\r\n            linestrings.arrivalLanes.forEach(\r\n                (linestring)=>{\r\n                    let positions = linestringToLatLng(linestring);\r\n                    antPaths.push(<AntPath positions={positions} options={{color: \"blue\"}} key={linestring+i}/>);\r\n                    i++;\r\n                }\r\n            );\r\n        }\r\n        return antPaths;\r\n    }\r\n\r\n    render(){\r\n        // console.log(this.state.linestrings);\r\n        const position = [this.lat, this.lng];\r\n        let antPaths = this.getAntPaths();\r\n        return (\r\n            <Map style={{width:'600px', height: '600px'}} center={position} zoom={this.zoom}>\r\n                <TileLayer\r\n                    attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                />\r\n                {antPaths}\r\n            </Map>\r\n        )\r\n    }\r\n}","import axios from 'axios';\r\nimport n3 from 'n3';\r\n\r\nconst { DataFactory } = n3;\r\nconst { namedNode } = DataFactory;\r\n\r\nexport function download(_uri){\r\n    return new Promise((resolve,reject) => {\r\n        axios.get(_uri)\r\n            .then(response => resolve(response.data))\r\n            .catch(error => reject(error));\r\n    });\r\n}\r\n\r\nexport function parseAndStoreQuads(_doc){\r\n    return new Promise(resolve => {\r\n       const parser = new n3.Parser();\r\n       const store = n3.Store();\r\n       parser.parse(_doc, (error, quad, prefixes) => {\r\n           if(quad)\r\n               store.addQuad(quad);\r\n           else\r\n               resolve(store);\r\n       })\r\n    });\r\n}\r\n\r\nexport async function getSignalGroups(_store){\r\n    let signalgroups = [];\r\n    await _store\r\n        .getQuads(null, namedNode('http://www.w3.org/2000/01/rdf-schema#type'), namedNode('https://w3id.org/opentrafficlights#Signalgroup'))\r\n        .forEach(\r\n            (quad) => {signalgroups.push(quad.subject.value);}\r\n        );\r\n    return signalgroups;\r\n}\r\n\r\nexport async function getLaneDefs(_store){ //map linestring op lane\r\n    let lanes = {};\r\n    await _store\r\n        .getQuads(null, \"http://www.opengis.net/#geosparql/wktLiteral\", null)\r\n        .forEach(\r\n            (quad) => {lanes[quad.subject.value] = quad.object.value;}\r\n        );\r\n    return lanes;\r\n}\r\n\r\nexport async function getStateDefs(_store){ //map state op signalgroup\r\n    let greenStates = {};\r\n    await _store\r\n        .getQuads(null, \"https://w3id.org/opentrafficlights#signalState\", null)\r\n        .forEach(\r\n            (quad) => {greenStates[quad.object.value] = quad.subject.value;}\r\n        );\r\n    return greenStates;\r\n}\r\n\r\nexport async function getGreenStates(_store){ //phase 6\r\n    let greenStates = [];\r\n    await _store\r\n        .getQuads(null, \"https://w3id.org/opentrafficlights#signalPhase\", \"https://w3id.org/opentrafficlights/thesauri/signalphase/6\")\r\n        .forEach(\r\n            (quad) => {greenStates.push(quad.subject.value);}\r\n        );\r\n    return greenStates;\r\n}\r\n\r\nexport function getDepartureLanes(_store){\r\n    let departurelanes = [];\r\n    if(_store){\r\n        let processedDepartureLanes = [];\r\n        _store.getQuads(null, namedNode('https://w3id.org/opentrafficlights#departureLane'), null).forEach((quad) => {\r\n            _store.getQuads(quad.object, namedNode('http://purl.org/dc/terms/description'), null).forEach( (quad) => {\r\n                if (!processedDepartureLanes.includes(quad.object.value)){\r\n                    processedDepartureLanes.push(quad.object.value);\r\n                }\r\n\r\n                // Load arrival lanes\r\n                _store.getQuads(null, namedNode('https://w3id.org/opentrafficlights#departureLane'), quad.subject).forEach((connectie) => {\r\n                    let signalgroup = _store.getQuads(connectie.subject, namedNode('https://w3id.org/opentrafficlights#signalGroup'), null)[0].object.value;\r\n                    _store.getQuads(connectie.subject, namedNode('https://w3id.org/opentrafficlights#arrivalLane'), null).forEach( (arrivalLane) => {\r\n                        _store.getQuads(arrivalLane.object, namedNode('http://purl.org/dc/terms/description'), null).forEach( (descr) => {\r\n                            if(!departurelanes[quad.subject.value]) departurelanes[quad.subject.value] = [];\r\n                            departurelanes[quad.subject.value][arrivalLane.object.value] = {\r\n                                '@id': arrivalLane.object.value,\r\n                                'http://purl.org/dc/terms/description': descr.object.value,\r\n                                'https://w3id.org/opentrafficlights#signalGroup': signalgroup\r\n                            };\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    }\r\n    return departurelanes;\r\n}\r\n\r\nexport function getLanesForSignalGroup(_store){ //build index which gives an array of arrival lanes and an array of departure lanes for each signalgroup\r\n    return new Promise((resolve)=>{\r\n        let signalGroups = {};\r\n        if(_store) {\r\n            _store.getQuads(null, namedNode('http://www.w3.org/2000/01/rdf-schema#type'), namedNode('https://w3id.org/opentrafficlights#Signalgroup')).forEach((signalGroup) => {\r\n                if(!signalGroups[signalGroup.subject.value]){\r\n                    signalGroups[signalGroup.subject.value] = {departureLanes: [], arrivalLanes: []};\r\n                }\r\n\r\n                _store.getQuads(null, namedNode('https://w3id.org/opentrafficlights#signalGroup'), signalGroup.subject).forEach((connection) => {\r\n\r\n                    //Load departure lanes\r\n                    _store.getQuads(connection.subject, namedNode('https://w3id.org/opentrafficlights#departureLane'), null).forEach((quad) => {\r\n                        if(!signalGroups[connection.object.value].departureLanes.includes(quad.object.value)) signalGroups[connection.object.value].departureLanes.push(quad.object.value);\r\n                    });\r\n\r\n                    //Load arrival lanes\r\n                    _store.getQuads(connection.subject, namedNode('https://w3id.org/opentrafficlights#arrivalLane'), null).forEach((quad) => {\r\n                        if(!signalGroups[connection.object.value].arrivalLanes.includes(quad.object.value)) signalGroups[connection.object.value].arrivalLanes.push(quad.object.value);\r\n                    });\r\n\r\n                });\r\n            })\r\n        }\r\n        resolve(signalGroups);\r\n    });\r\n}\r\n\r\n","export let DATASET_URL = 'https://lodi.ilabt.imec.be/observer/rawdata/latest';","import React from 'react';\r\nimport GeoMap from \"./GeoMap\";\r\nimport {download, getSignalGroups, parseAndStoreQuads, getDepartureLanes, getLaneDefs, getGreenStates, getStateDefs, getLanesForSignalGroup} from \"../data/api\";\r\nimport {DATASET_URL} from \"../data/const\";\r\n\r\nexport default class GeoMapContainer extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.doc = null; //niet gebruikt\r\n        this.store = null; //niet gebruikt en niet geupdated\r\n        this.signalgroups = null; //niet gebruikt\r\n        this.laneDefs = null;\r\n        this.departureLanes = null; //niet gebruikt\r\n        this.stateDefs = null; //niet meer nodig\r\n        this.lanesForSignalgroups = null;\r\n\r\n        this.state = {\r\n            greenLightLineStrings: null\r\n        };\r\n        this.init();\r\n    }\r\n\r\n    init(){\r\n        download(DATASET_URL).then(\r\n            doc => {\r\n                this.doc = doc;\r\n                parseAndStoreQuads(doc).then(\r\n                    store => {\r\n                        this.store = store; //niet meer nodig\r\n                        getSignalGroups(store).then(sg => this.signalgroups = sg);  //niet meer nodig\r\n                        this.departureLanes = getDepartureLanes(store); //niet meer nodig\r\n                        let stateDefs = {};\r\n                        let greenStates = [];\r\n                        Promise.all([\r\n                            getLaneDefs(store).then(lanes => this.laneDefs = lanes),\r\n                            getLanesForSignalGroup(store).then((lanesForGroups)=>{this.lanesForSignalgroups = lanesForGroups}),\r\n                            getStateDefs(store).then(defs => stateDefs = defs),\r\n                            getGreenStates(store).then(states => greenStates = states)\r\n                        ]).then(\r\n                            ()=> {this.setState({greenLightLineStrings: this.getGreenLightLineStrings(greenStates,stateDefs)})}\r\n                        )\r\n                    });\r\n            }\r\n        );\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.timer = setInterval(()=>this.tick(),2000);\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        clearInterval(this.timer);\r\n    }\r\n\r\n    tick(){\r\n        //nodig eerst terug latest op te vragen en uit de opgevraagde store de greenstates te bepalen\r\n        download(DATASET_URL).then(\r\n            doc => {\r\n                parseAndStoreQuads(doc).then(\r\n                    store => {\r\n                        getStateDefs(store).then(states => {\r\n                            getGreenStates(store).then(greenStates => this.setState({greenLightLineStrings: this.getGreenLightLineStrings(greenStates,states)}));\r\n                        });\r\n                    }\r\n                );\r\n            }\r\n        );\r\n    }\r\n\r\n    /*\r\n    Be careful, all arrival lanes are taken together in an array, but not every arrival lane can be reached from every departure lane.\r\n    We use this function to gather the linestrings that should be drawn and we make no difference in color between which arrival lane belongs to which departure lane.\r\n    If we would want to be able to display the arrival lanes that can be reached from one selected departure lane, this methods return value and the props given to GeoMap should be revised.\r\n     */\r\n    getGreenLightLineStrings(greenStates,stateDefs){\r\n        let greenLightLineStrings = {departureLanes: [], arrivalLanes: []};\r\n        if(greenStates){\r\n            greenStates.forEach(\r\n                (state) => {\r\n                    // console.log(\"state\",state);\r\n                    let signalgroup = stateDefs[state];\r\n                    // console.log(\"signalgroup\",signalgroup,\"lanesForSignalGroups: \",this.lanesForSignalgroups);\r\n                    // console.log(signalgroup,this.lanesForSignalgroups[signalgroup]);\r\n                    if(this.lanesForSignalgroups[signalgroup]){\r\n                        let greenDepartureLanes = this.lanesForSignalgroups[signalgroup].departureLanes;\r\n                        let greenArrivalLanes = this.lanesForSignalgroups[signalgroup].arrivalLanes;\r\n                        // let greenDepartureLineStrings = [];\r\n                        // let greenArrivalLineStrings = [];\r\n                        // greenDepartureLanes.forEach((lane)=>{ if(this.laneDefs[lane]) greenDepartureLineStrings.push(this.laneDefs[lane])});\r\n                        // greenArrivalLanes.forEach((lane)=>{ if(this.laneDefs[lane]) greenArrivalLineStrings.push(this.laneDefs[lane])});\r\n\r\n                        greenDepartureLanes.forEach((lane)=>{ if(this.laneDefs[lane] && !greenLightLineStrings.departureLanes.includes(this.laneDefs[lane])) greenLightLineStrings.departureLanes.push(this.laneDefs[lane])});\r\n                        greenArrivalLanes.forEach((lane)=>{ if(this.laneDefs[lane] && !greenLightLineStrings.arrivalLanes.includes(this.laneDefs[lane])) greenLightLineStrings.arrivalLanes.push(this.laneDefs[lane])});\r\n\r\n                        // console.log(greenDepartureLanes,greenArrivalLanes);\r\n                        // console.log(greenDepartureLineStrings);\r\n                        // console.log(greenArrivalLineStrings);\r\n                    }\r\n                }\r\n            );\r\n        }\r\n        return greenLightLineStrings;\r\n    }\r\n\r\n    render(){\r\n        //console.log(this.state);\r\n        let {greenLightLineStrings} = this.state;\r\n        // console.log(greenLightLineStrings);\r\n        // console.log(\"doc: \", this.doc);\r\n        // console.log(\"store: \", this.store);\r\n        // console.log(\"signalgroups: \", this.signalgroups);\r\n        // console.log(\"laneDefs: \", this.laneDefs);\r\n        // console.log(\"departureLanes: \",this.departureLanes);\r\n        // console.log(\"stateDefs: \", this.stateDefs);\r\n        // console.log(\"lanesForSignalGroups: \", this.lanesForSignalgroups);\r\n        return (\r\n            <div>\r\n                <GeoMap linestrings={greenLightLineStrings}/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport GeoMapContainer from \"./components/GeoMapContainer\";\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <GeoMapContainer/>\r\n        <div>\r\n            <p>Departure lanes are drawn in green. Arrival lanes are drawn in blue.</p>\r\n            <p> There is no distinction made between which arrival lanes can be reached from which departure lanes.</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}